var _user$project$Main$model = {parting: _user$project$Parting$model, visible: false};
var _user$project$Main$Model = F2(
	function (a, b) {
		return {parting: a, visible: b};
	});
var _user$project$Main$NoOp = function (a) {
	return {ctor: 'NoOp', _0: a};
};
var _user$project$Main$Visible = function (a) {
	return {ctor: 'Visible', _0: a};
};
var _user$project$Main$delayVisibility = A3(
	_elm_lang$core$Task$perform,
	_user$project$Main$NoOp,
	_user$project$Main$Visible,
	A2(
		_elm_lang$core$Task$andThen,
		_elm_lang$core$Process$sleep(1 * _elm_lang$core$Time$second),
		function (_p0) {
			return _elm_lang$core$Task$succeed(true);
		}));
var _user$project$Main$PartingMsg = function (a) {
	return {ctor: 'PartingMsg', _0: a};
};
var _user$project$Main$init = function () {
	var _p1 = _user$project$Parting$init;
	var str = _p1._0;
	var msg = _p1._1;
	return {
		ctor: '_Tuple2',
		_0: _user$project$Main$model,
		_1: _elm_lang$core$Platform_Cmd$batch(
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PartingMsg, msg),
					_user$project$Main$delayVisibility
				]))
	};
}();
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'PartingMsg':
				var _p3 = A2(_user$project$Parting$update, _p2._0, model.parting);
				var updatedPartingModel = _p3._0;
				var progressCmd = _p3._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{parting: updatedPartingModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PartingMsg, progressCmd)
				};
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{visible: _p2._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$renderParting = function (model) {
	return A2(
		_elm_lang$html$Html_App$map,
		_user$project$Main$PartingMsg,
		_user$project$Parting$view(model.parting));
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$classList(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'app', _1: true},
						{ctor: '_Tuple2', _0: 'visible', _1: model.visible}
					]))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$renderParting(model),
				A2(
				_elm_lang$html$Html$span,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(', thanks for being awesome!')
					]))
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{
			init: _user$project$Main$init,
			view: _user$project$Main$view,
			update: _user$project$Main$update,
			subscriptions: function (_p4) {
				return _elm_lang$core$Platform_Sub$none;
			}
		})
};
